{
  "openapi": "3.0.0",
  "info": {
    "title": "Smart Collateral API",
    "version": "1.0.0",
    "description": "API documentation for Smart Collateral API"
  },
  "servers": [
    {
      "url": "http://localhost:3000/api/v1"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication endpoints"
    },
    {
      "name": "Health Check",
      "description": "System health check endpoint"
    }
  ],
  "components": {
    "schemas": {
      "History": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "city": { "type": "string" },
          "latitude": { "type": "number" },
          "longitude": { "type": "number" },
          "swimming_pool": { "type": "boolean" },
          "garage": { "type": "number" },
          "carport": { "type": "number" },
          "garden": { "type": "boolean" },
          "parking_access": { "type": "boolean" },
          "drying_area": { "type": "boolean" },
          "security": { "type": "boolean" },
          "bedrooms": { "type": "number" },
          "bathrooms": { "type": "number" },
          "land_size": { "type": "number" },
          "building_size": { "type": "number" },
          "certificate": { "type": "string" },
          "electricity": { "type": "number" },
          "floors": { "type": "number" },
          "property_condition": { "type": "number" },
          "price_in_rp": { "type": "number" },
          "is_completed": { "type": "boolean" }
        }
      },
      "Predict": {
        "type": "object",
        "properties": {
          "city": { "type": "string" },
          "latitude": { "type": "number" },
          "longitude": { "type": "number" },
          "swimming_pool": { "type": "boolean" },
          "garage": { "type": "number" },
          "carport": { "type": "number" },
          "garden": { "type": "boolean" },
          "parking_access": { "type": "boolean" },
          "drying_area": { "type": "boolean" },
          "security": { "type": "boolean" },
          "bedrooms": { "type": "number" },
          "bathrooms": { "type": "number" },
          "land_size": { "type": "number" },
          "building_size": { "type": "number" },
          "certificate": { "type": "string" },
          "electricity": { "type": "number" },
          "floors": { "type": "number" },
          "property_condition": { "type": "number" }
        }
      },
      "AddUser": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "P@ssw0rd123"
          },
          "branch": {
            "type": "string",
            "example": "Jakarta"
          }
        },
        "required": ["email", "name", "password", "branch"]
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "paths": {
    "/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticates a user and returns a token.",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User logged in successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string",
                          "example": "eyJhbGciOi..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "summary": "Get authenticated user",
        "description": "Retrieves the authenticated user's data.",
        "tags": ["Authentication"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticated user data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Get Authenticated User successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "123"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": ["Users"],
        "summary": "Add a new user",
        "description": "This endpoint allows an admin to add a new user.",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User added successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "user@example.com"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "branch": {
                          "type": "string",
                          "example": "Jakarta"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/check": {
      "get": {
        "summary": "Health check",
        "description": "Returns system health status.",
        "tags": ["Health Check"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Service is running",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "OK"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/history": {
      "post": {
        "summary": "Add a new history",
        "tags": ["History"],
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/History" }
            }
          }
        },
        "responses": {
          "201": { "description": "History added successfully" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" }
        }
      },
      "get": {
        "summary": "Get user history",
        "tags": ["History"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "is_completed",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          { "name": "limit", "in": "query", "schema": { "type": "integer" } },
          { "name": "offset", "in": "query", "schema": { "type": "integer" } }
        ],
        "responses": {
          "200": { "description": "History fetched successfully" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/history/{id}": {
      "get": {
        "summary": "Get detailed history by ID",
        "tags": ["History"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Detailed history fetched successfully" },
          "401": { "description": "Unauthorized" }
        }
      },
      "put": {
        "summary": "Update history",
        "tags": ["History"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/History" }
            }
          }
        },
        "responses": {
          "200": { "description": "History updated successfully" },
          "401": { "description": "Unauthorized" }
        }
      },
      "delete": {
        "summary": "Delete history",
        "tags": ["History"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "History deleted successfully" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/predict": {
      "post": {
        "summary": "Predict property value",
        "tags": ["Predict"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Predict" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Predicted successfully"
          }
        }
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ]
}
